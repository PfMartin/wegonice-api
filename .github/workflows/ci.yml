name: Test and Build

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main

env:
  GO_VERSION: 1.22
  WEGONICE_URI: mongodb://localhost:27017
  WEGONICE_DB: wegonice
  WEGONICE_USER: niceUser
  WEGONICE_PWD: nicePassword
  MONGO_INIT_ROOT_USERNAME: niceUser
  MONGO_INITDB_ROOT_PASSWORD: nicePassword
  MONGO_INITDB_DATABASE: wegonice
  CONTAINER_REGISTRY: ghcr.io
  BINARY_NAME: wegonice-api
  ARTIFACT_NAME: api-binaries

jobs:
  static-checks:
    name: static-checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}}
      
      - name: go vet
        run: go vet ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54

  test-api:
    name: test-api
    runs-on: ubuntu-latest

    services:
      wegonice-db:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{env.MONGO_INIT_ROOT_USERNAME}}
          MONGO_INITDB_ROOT_PASSWORD: ${{env.MONGO_INITDB_ROOT_PASSWORD}}
          MONGO_INITDB_DATABASE: ${{env.MONGO_INITDB_DATABASE}}
        ports:
          - 27017-27019:27017-27019
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 5
          --name mongodb

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Database user
        run: |
          docker exec mongodb mongosh ${{env.WEGONICE_DB}} -u ${{env.MONGO_INIT_ROOT_USERNAME}} -p ${{env.MONGO_INITDB_ROOT_PASSWORD}} --authenticationDatabase admin --eval "db.createUser({user: '${{env.WEGONICE_USER}}', pwd: '${{env.WEGONICE_PWD}}', roles: [{role: 'readWrite', db: '${{env.WEGONICE_DB}}'}]})"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}}
      
      - name: Run Tests
        run: go test -v ./...

      - name: Race Unit tests
        run: go test -race ./... -run 'Unit'

  build-api:
    runs-on: ubuntu-latest
    needs: test-api

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{env.GO_VERSION}}

      - name: Install swag
        run: make get-swag

      - name: Build docs
        run: make docs
      
      - name: Build binaries
        run: |
          GOOS=linux GOARCH=amd64 go build -v -o ${{env.BINARY_NAME}}-amd64
          GOOS=linux GOARCH=arm64 go build -v -o ${{env.BINARY_NAME}}-arm64

      - name: Upload binaries as artifact
        uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: ./

  publish-container:
    runs-on: ubuntu-latest
    needs: build-api
    if: github.ref == 'refs/head/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Get branch name
        run: echo "BRANCH_NAME=$(git symbolic-ref --short HEAD)" >> $GITHUB_ENV

      - name: Get tags for current branch
        run: |
          git fetch --tags
          TAGS=$(git tag --contains $BRANCH_NAME)
          echo "TAGS=$TAGS" >> $GITHUB_ENV
          echo "Tags for current branch: $TAGS"

      - name: Set container tag
        run: |
          if [ -z "$TAGS" ]; then
            echo "TAG_NAME=latest" >> $GITHUB_ENV
          else
            echo "TAG_NAME=$TAGS" >> $GITHUB_ENV
          fi
        
      - name: Download binary
        uses: actions/download-artifact@v3
        with:
          name: ${{env.ARTIFACT_NAME}}
          path: ./

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.CONTAINER_REGISTRY}}
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}
      
      - name: Push container to GitHub Container Registry
        run: |
          echo "Tagging with tag: $TAG_NAME"
          docker buildx create --use --name multi-arch
          docker buildx build --tag ${{env.CONTAINER_REGISTRY}}/pfmartin/${{env.BINARY_NAME}}:$TAG_NAME --platform="linux/amd64,linux/arm64" . --push