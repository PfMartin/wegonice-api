{
    "swagger": "2.0",
    "info": {
        "description": "API for the vegan recipes",
        "title": "WeGoNice API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Martin Pfatrisch",
            "url": "https://github.com/PfMartin",
            "email": "martinpfatrisch@gmail.com"
        },
        "license": {
            "name": "All Rights Reserved"
        },
        "version": "1.0"
    },
    "host": "localhost:8000",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "A registered user is logged in with their email and matching password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logs a user in",
                "operationId": "auth-login-user",
                "parameters": [
                    {
                        "description": "Credentials for the login",
                        "name": "userCredentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUserBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login response with required tokens",
                        "schema": {
                            "$ref": "#/definitions/loginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorNotFound"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/ErrorNotAcceptable"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorInternalServerError"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "A new user is registered by setting an unique email address and a password. The admins have to approve and active the user manually.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Registers a user",
                "operationId": "auth-register-user",
                "parameters": [
                    {
                        "description": "Credentials for the registration",
                        "name": "userCredentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authUserBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "406": {
                        "description": "Not Acceptable",
                        "schema": {
                            "$ref": "#/definitions/ErrorNotAcceptable"
                        }
                    }
                }
            }
        },
        "/authors": {
            "get": {
                "description": "All authors are listed in a paginated manner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "List all authors",
                "operationId": "authors-list-authors",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header for bearer token",
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for the pagination",
                        "name": "page_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of elements in one page",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of authors matching the given pagination parameters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AuthorResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorInternalServerError"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new author",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Create new author",
                "operationId": "authors-create-author",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header for bearer token",
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "description": "Data for the author to create",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthorToCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of the created author",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorInternalServerError"
                        }
                    }
                }
            }
        },
        "/authors/{id}": {
            "get": {
                "description": "One author, which matches the ID, is returned",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Get one author by ID",
                "operationId": "authors-get-author-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header for bearer token",
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the desired author",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Author that matches the ID",
                        "schema": {
                            "$ref": "#/definitions/AuthorResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorInternalServerError"
                        }
                    }
                }
            },
            "delete": {
                "description": "One author, which matches the ID, is deleted",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Delete one author by ID",
                "operationId": "authors-delete-author-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header for bearer token",
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the desired author to patch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorNotFound"
                        }
                    }
                }
            },
            "patch": {
                "description": "One author, which matches the ID, is modified with the provided patch",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authors"
                ],
                "summary": "Patch one author by ID",
                "operationId": "authors-patch-author-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header for bearer token",
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the desired author to patch",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Patch for modifying the author",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthorUpdate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorNotFound"
                        }
                    }
                }
            }
        },
        "/heartbeat": {
            "get": {
                "description": "Check if the API is reachable with this route",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "heartbeat"
                ],
                "summary": "Check heartbeat",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "$ref": "#/definitions/heartbeatResponse"
                        }
                    }
                }
            }
        },
        "/recipes": {
            "get": {
                "description": "All recipes are listed in a paginated manner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "List all recipes",
                "operationId": "recipes-list-recipes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header for bearer token",
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for the pagination",
                        "name": "page_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of elements in one page",
                        "name": "page_size",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of recipes matching the given pagination parameters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RecipeResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorInternalServerError"
                        }
                    }
                }
            }
        },
        "/recipes/{id}": {
            "get": {
                "description": "One recipe, which matches the ID, is returned",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "Get one recipe by ID",
                "operationId": "recipes-get-recipe-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization header for bearer token",
                        "name": "authorization",
                        "in": "header"
                    },
                    {
                        "type": "integer",
                        "description": "ID of the desired recipe",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Recipe that matches the ID",
                        "schema": {
                            "$ref": "#/definitions/api.RecipeResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/ErrorBadRequest"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/ErrorUnauthorized"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/ErrorNotFound"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/ErrorInternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AuthorResponse": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "createdAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "firstName": {
                    "type": "string",
                    "example": "Moe"
                },
                "id": {
                    "type": "string",
                    "example": "660c4b99bc1bc4aabe126cd1"
                },
                "imageName": {
                    "type": "string",
                    "example": "moezarella.png"
                },
                "instagramUrl": {
                    "type": "string",
                    "example": "https://wwww.instagram.com/moezarella/"
                },
                "lastName": {
                    "type": "string",
                    "example": "Zarella"
                },
                "modifiedAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "name": {
                    "type": "string",
                    "example": "Moe Zarella"
                },
                "recipeCount": {
                    "type": "integer",
                    "example": 5
                },
                "userCreated": {
                    "$ref": "#/definitions/api.UserResponse"
                },
                "userId": {
                    "type": "string",
                    "example": "660c4b99bc1bc4aabe3e6cd1"
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://www.moezarella.com"
                },
                "youtubeUrl": {
                    "type": "string",
                    "example": "https://www.youtube.com/channel/UCy8asdgasdf7RcC6OZffZA"
                }
            }
        },
        "AuthorToCreate": {
            "type": "object",
            "required": [
                "name",
                "userId"
            ],
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "Moe"
                },
                "imageName": {
                    "type": "string",
                    "example": "moezarella.png"
                },
                "instagramUrl": {
                    "type": "string",
                    "example": "https://wwww.instagram.com/moezarella/"
                },
                "lastName": {
                    "type": "string",
                    "example": "Zarella"
                },
                "name": {
                    "type": "string",
                    "example": "Moe Zarella"
                },
                "userId": {
                    "type": "string",
                    "example": "660c4b99bc1bc4aabe3e6cd1"
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://www.moezarella.com"
                },
                "youtubeUrl": {
                    "type": "string",
                    "example": "https://www.youtube.com/channel/UCy8asdgasdf7RcC6OZffZA"
                }
            }
        },
        "AuthorUpdate": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "Moe"
                },
                "imageName": {
                    "type": "string",
                    "example": "moezarella.png"
                },
                "instagramUrl": {
                    "type": "string",
                    "example": "https://wwww.instagram.com/moezarella/"
                },
                "lastName": {
                    "type": "string",
                    "example": "Zarella"
                },
                "name": {
                    "type": "string",
                    "example": "Moe Zarella"
                },
                "websiteUrl": {
                    "type": "string",
                    "example": "https://www.moezarella.com"
                },
                "youtubeUrl": {
                    "type": "string",
                    "example": "https://www.youtube.com/channel/UCy8asdgasdf7RcC6OZffZA"
                }
            }
        },
        "ErrorBadRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Failed to parse data"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 400
                },
                "statusText": {
                    "type": "string",
                    "example": "Bad Request"
                }
            }
        },
        "ErrorInternalServerError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "An internal server error occurred"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 500
                },
                "statusText": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "ErrorNotAcceptable": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Provided input is not acceptable"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 406
                },
                "statusText": {
                    "type": "string",
                    "example": "Not Acceptable"
                }
            }
        },
        "ErrorNotFound": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Could not find requested data"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 404
                },
                "statusText": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "ErrorUnauthorized": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Unauthorized for retrieving this information"
                },
                "statusCode": {
                    "type": "integer",
                    "example": 401
                },
                "statusText": {
                    "type": "string",
                    "example": "Unauthorized"
                }
            }
        },
        "api.RecipeResponse": {
            "type": "object",
            "required": [
                "authorId"
            ],
            "properties": {
                "author": {
                    "$ref": "#/definitions/AuthorResponse"
                },
                "authorId": {
                    "type": "string",
                    "example": "660c4b99bc1bc4aabe126cd1"
                },
                "category": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Category"
                        }
                    ],
                    "example": "breakfast"
                },
                "createdAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "id": {
                    "type": "string",
                    "example": "660c4b99bc1bc4aabe126cd1"
                },
                "imageName": {
                    "type": "string",
                    "example": "Pancakes.png"
                },
                "ingredients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.Ingredient"
                    }
                },
                "modifiedAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "name": {
                    "type": "string",
                    "example": "Pancakes"
                },
                "prepSteps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.PrepStep"
                    }
                },
                "recipeUrl": {
                    "type": "string",
                    "example": "https://www.allthepancakes.com/pancakes"
                },
                "timeM": {
                    "type": "integer",
                    "example": 30
                },
                "userCreated": {
                    "$ref": "#/definitions/api.UserResponse"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "api.UserResponse": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "createdAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "660c4b99bc1bc4aabe3e6cd1"
                },
                "isActive": {
                    "type": "boolean",
                    "example": true
                },
                "modifiedAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "role": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.Role"
                        }
                    ],
                    "example": "user"
                }
            }
        },
        "authUserBody": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "TODO: Email validation",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 6,
                    "example": "s3cr3tP@ssw0rd"
                }
            }
        },
        "db.AmountUnit": {
            "type": "string",
            "enum": [
                "ml",
                "l",
                "mg",
                "g",
                "tbs",
                "tsp",
                "pc"
            ],
            "x-enum-varnames": [
                "Milliliters",
                "Liters",
                "Milligrams",
                "Grams",
                "Tablespoon",
                "Teaspoon",
                "Piece"
            ]
        },
        "db.Category": {
            "type": "string",
            "enum": [
                "breakfast",
                "main",
                "desert",
                "smoothie",
                "baby",
                "drink"
            ],
            "x-enum-varnames": [
                "Breakfast",
                "Main",
                "Desert",
                "Smoothie",
                "Baby",
                "Drink"
            ]
        },
        "db.Ingredient": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "example": 100
                },
                "name": {
                    "type": "string",
                    "example": "flour"
                },
                "unit": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.AmountUnit"
                        }
                    ],
                    "example": "g"
                }
            }
        },
        "db.PrepStep": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Dice the onions"
                },
                "rank": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "db.Role": {
            "type": "string",
            "enum": [
                "user",
                "admin"
            ],
            "x-enum-varnames": [
                "UserRole",
                "AdminRole"
            ]
        },
        "heartbeatResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "example": "ok"
                }
            }
        },
        "loginResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "v2.local.example-session-token"
                },
                "accessTokenExpiresAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "refreshToken": {
                    "type": "string",
                    "example": "v2.local.example-refresh-token"
                },
                "refreshTokenExpiresAt": {
                    "type": "integer",
                    "example": 1714462120
                },
                "sessionId": {
                    "type": "string",
                    "example": "660c4b99bc1bc4aabe3e6cd1"
                },
                "userEmail": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}