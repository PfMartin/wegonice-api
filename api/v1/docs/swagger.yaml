basePath: /api/v1
definitions:
  AuthorResponse:
    properties:
      createdAt:
        example: 1714462120
        type: integer
      firstName:
        example: Moe
        type: string
      id:
        example: 660c4b99bc1bc4aabe126cd1
        type: string
      imageName:
        example: moezarella.png
        type: string
      instagramUrl:
        example: https://wwww.instagram.com/moezarella/
        type: string
      lastName:
        example: Zarella
        type: string
      modifiedAt:
        example: 1714462120
        type: integer
      name:
        example: Moe Zarella
        type: string
      recipeCount:
        example: 5
        type: integer
      userCreated:
        $ref: '#/definitions/UserResponse'
      userId:
        example: 660c4b99bc1bc4aabe3e6cd1
        type: string
      websiteUrl:
        example: https://www.moezarella.com
        type: string
      youtubeUrl:
        example: https://www.youtube.com/channel/UCy8asdgasdf7RcC6OZffZA
        type: string
    required:
    - name
    type: object
  AuthorToCreate:
    properties:
      firstName:
        example: Moe
        type: string
      imageName:
        example: moezarella.png
        type: string
      instagramUrl:
        example: https://wwww.instagram.com/moezarella/
        type: string
      lastName:
        example: Zarella
        type: string
      name:
        example: Moe Zarella
        type: string
      userId:
        example: 660c4b99bc1bc4aabe3e6cd1
        type: string
      websiteUrl:
        example: https://www.moezarella.com
        type: string
      youtubeUrl:
        example: https://www.youtube.com/channel/UCy8asdgasdf7RcC6OZffZA
        type: string
    required:
    - name
    - userId
    type: object
  AuthorUpdate:
    properties:
      firstName:
        example: Moe
        type: string
      imageName:
        example: moezarella.png
        type: string
      instagramUrl:
        example: https://wwww.instagram.com/moezarella/
        type: string
      lastName:
        example: Zarella
        type: string
      name:
        example: Moe Zarella
        type: string
      websiteUrl:
        example: https://www.moezarella.com
        type: string
      youtubeUrl:
        example: https://www.youtube.com/channel/UCy8asdgasdf7RcC6OZffZA
        type: string
    type: object
  ErrorBadRequest:
    properties:
      message:
        example: Failed to parse data
        type: string
      statusCode:
        example: 400
        type: integer
      statusText:
        example: Bad Request
        type: string
    type: object
  ErrorInternalServerError:
    properties:
      message:
        example: An internal server error occurred
        type: string
      statusCode:
        example: 500
        type: integer
      statusText:
        example: Internal Server Error
        type: string
    type: object
  ErrorNotAcceptable:
    properties:
      message:
        example: Provided input is not acceptable
        type: string
      statusCode:
        example: 406
        type: integer
      statusText:
        example: Not Acceptable
        type: string
    type: object
  ErrorNotFound:
    properties:
      message:
        example: Could not find requested data
        type: string
      statusCode:
        example: 404
        type: integer
      statusText:
        example: Not Found
        type: string
    type: object
  ErrorUnauthorized:
    properties:
      message:
        example: Unauthorized for retrieving this information
        type: string
      statusCode:
        example: 401
        type: integer
      statusText:
        example: Unauthorized
        type: string
    type: object
  RecipeResponse:
    properties:
      author:
        $ref: '#/definitions/AuthorResponse'
      authorId:
        example: 660c4b99bc1bc4aabe126cd1
        type: string
      category:
        allOf:
        - $ref: '#/definitions/db.Category'
        example: breakfast
      createdAt:
        example: 1714462120
        type: integer
      id:
        example: 660c4b99bc1bc4aabe126cd1
        type: string
      imageName:
        example: Pancakes.png
        type: string
      ingredients:
        items:
          $ref: '#/definitions/db.Ingredient'
        type: array
      modifiedAt:
        example: 1714462120
        type: integer
      name:
        example: Pancakes
        type: string
      prepSteps:
        items:
          $ref: '#/definitions/db.PrepStep'
        type: array
      recipeUrl:
        example: https://www.allthepancakes.com/pancakes
        type: string
      timeM:
        example: 30
        type: integer
      userCreated:
        $ref: '#/definitions/UserResponse'
      userId:
        example: 660c4b99bc1bc4aabe126cd1
        type: string
    required:
    - authorId
    type: object
  RecipeToCreate:
    properties:
      authorId:
        example: 660c4b99bc1bc4aabe126cd1
        type: string
      category:
        allOf:
        - $ref: '#/definitions/db.Category'
        example: breakfast
      imageName:
        example: Pancakes.png
        type: string
      ingredients:
        items:
          $ref: '#/definitions/db.Ingredient'
        type: array
      name:
        example: Pancakes
        type: string
      prepSteps:
        items:
          $ref: '#/definitions/db.PrepStep'
        type: array
      recipeUrl:
        example: https://www.allthepancakes.com/pancakes
        type: string
      timeM:
        example: 30
        type: integer
      userId:
        example: 660c4b99bc1bc4aabe126cd1
        type: string
    required:
    - authorId
    - name
    - userId
    type: object
  RecipeUpdate:
    properties:
      authorId:
        example: 660c4b99bc1bc4aabe126cd1
        type: string
      category:
        allOf:
        - $ref: '#/definitions/db.Category'
        example: breakfast
      imageName:
        example: Pancakes.png
        type: string
      ingredients:
        items:
          $ref: '#/definitions/db.Ingredient'
        type: array
      name:
        example: Pancakes
        type: string
      prepSteps:
        items:
          $ref: '#/definitions/db.PrepStep'
        type: array
      recipeUrl:
        example: https://www.allthepancakes.com/pancakes
        type: string
      timeM:
        example: 30
        type: integer
    type: object
  UserResponse:
    properties:
      createdAt:
        example: 1714462120
        type: integer
      email:
        example: user@example.com
        type: string
      id:
        example: 660c4b99bc1bc4aabe3e6cd1
        type: string
      isActive:
        example: true
        type: boolean
      modifiedAt:
        example: 1714462120
        type: integer
      role:
        allOf:
        - $ref: '#/definitions/db.Role'
        example: user
    required:
    - email
    type: object
  authUserBody:
    properties:
      email:
        description: 'TODO: Email validation'
        example: user@example.com
        type: string
      password:
        example: s3cr3tP@ssw0rd
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  db.AmountUnit:
    enum:
    - ml
    - l
    - mg
    - g
    - tbs
    - tsp
    - pc
    type: string
    x-enum-varnames:
    - Milliliters
    - Liters
    - Milligrams
    - Grams
    - Tablespoon
    - Teaspoon
    - Piece
  db.Category:
    enum:
    - breakfast
    - main
    - desert
    - smoothie
    - baby
    - drink
    type: string
    x-enum-varnames:
    - Breakfast
    - Main
    - Desert
    - Smoothie
    - Baby
    - Drink
  db.Ingredient:
    properties:
      amount:
        example: 100
        type: integer
      name:
        example: flour
        type: string
      unit:
        allOf:
        - $ref: '#/definitions/db.AmountUnit'
        example: g
    type: object
  db.PrepStep:
    properties:
      description:
        example: Dice the onions
        type: string
      rank:
        example: 1
        type: integer
    type: object
  db.Role:
    enum:
    - user
    - admin
    type: string
    x-enum-varnames:
    - UserRole
    - AdminRole
  heartbeatResponse:
    properties:
      status:
        example: ok
        type: string
    type: object
  loginResponse:
    properties:
      accessToken:
        example: v2.local.example-session-token
        type: string
      accessTokenExpiresAt:
        example: 1714462120
        type: integer
      refreshToken:
        example: v2.local.example-refresh-token
        type: string
      refreshTokenExpiresAt:
        example: 1714462120
        type: integer
      sessionId:
        example: 660c4b99bc1bc4aabe3e6cd1
        type: string
      userEmail:
        example: user@example.com
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8000
info:
  contact:
    email: martinpfatrisch@gmail.com
    name: Martin Pfatrisch
    url: https://github.com/PfMartin
  description: API for the vegan recipes
  license:
    name: All Rights Reserved
  termsOfService: http://swagger.io/terms/
  title: WeGoNice API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: A registered user is logged in with their email and matching password.
      operationId: auth-login-user
      parameters:
      - description: Credentials for the login
        in: body
        name: userCredentials
        required: true
        schema:
          $ref: '#/definitions/authUserBody'
      produces:
      - application/json
      responses:
        "200":
          description: Login response with required tokens
          schema:
            $ref: '#/definitions/loginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorNotFound'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/ErrorNotAcceptable'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Logs a user in
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: A new user is registered by setting an unique email address and
        a password. The admins have to approve and active the user manually.
      operationId: auth-register-user
      parameters:
      - description: Credentials for the registration
        in: body
        name: userCredentials
        required: true
        schema:
          $ref: '#/definitions/authUserBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "406":
          description: Not Acceptable
          schema:
            $ref: '#/definitions/ErrorNotAcceptable'
      summary: Registers a user
      tags:
      - auth
  /authors:
    get:
      consumes:
      - application/json
      description: All authors are listed in a paginated manner
      operationId: authors-list-authors
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: Offset for the pagination
        in: query
        name: page_id
        required: true
        type: integer
      - description: Number of elements in one page
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of authors matching the given pagination parameters
          schema:
            items:
              $ref: '#/definitions/AuthorResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: List all authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      description: Creates a new author
      operationId: authors-create-author
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: Data for the author to create
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/AuthorToCreate'
      produces:
      - application/json
      responses:
        "201":
          description: ID of the created author
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Create new author
      tags:
      - authors
  /authors/{id}:
    delete:
      consumes:
      - application/json
      description: One author, which matches the ID, is deleted
      operationId: authors-delete-author-by-id
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: ID of the desired author to patch
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorNotFound'
      summary: Delete one author by ID
      tags:
      - authors
    get:
      consumes:
      - application/json
      description: One author, which matches the ID, is returned
      operationId: authors-get-author-by-id
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: ID of the desired author
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Author that matches the ID
          schema:
            $ref: '#/definitions/AuthorResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Get one author by ID
      tags:
      - authors
    patch:
      consumes:
      - application/json
      description: One author, which matches the ID, is modified with the provided
        patch
      operationId: authors-patch-author-by-id
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: ID of the desired author to patch
        in: path
        name: id
        required: true
        type: integer
      - description: Patch for modifying the author
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/AuthorUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorNotFound'
      summary: Patch one author by ID
      tags:
      - authors
  /heartbeat:
    get:
      consumes:
      - application/json
      description: Check if the API is reachable with this route
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/heartbeatResponse'
      summary: Check heartbeat
      tags:
      - heartbeat
  /images:
    post:
      consumes:
      - multipart/form-data
      description: |-
        Saves an image to the filesystem. Send a request with
        `const formData = new FormData();`
        `formData.append('image', image);`
        Add the header `'ContentType': 'multipart/form-data';`
      operationId: images-save
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: Number of elements in one page
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Saves an image
      tags:
      - images
  /images/{imagename}:
    delete:
      consumes:
      - application/json
      description: Deletes an image with the given image name from the file system
      operationId: images-delete
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: Number of elements in one page
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Image for the given image name
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Deletes an image
      tags:
      - images
    get:
      consumes:
      - application/json
      description: Gets an image with the given image name from the file system
      operationId: images-get
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: Number of elements in one page
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Image for the given image name
          schema:
            items:
              type: integer
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Gets an image
      tags:
      - images
  /recipes:
    get:
      consumes:
      - application/json
      description: All recipes are listed in a paginated manner
      operationId: recipes-list-recipes
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: Offset for the pagination
        in: query
        name: page_id
        required: true
        type: integer
      - description: Number of elements in one page
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of recipes matching the given pagination parameters
          schema:
            items:
              $ref: '#/definitions/RecipeResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: List all recipes
      tags:
      - recipes
    post:
      consumes:
      - application/json
      description: Creates a new recipe
      operationId: recipes-create-recipe
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: Data for the recipe to create
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/RecipeToCreate'
      produces:
      - application/json
      responses:
        "201":
          description: ID of the created recipe
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Create new recipe
      tags:
      - recipes
  /recipes/{id}:
    delete:
      consumes:
      - application/json
      description: One recipe, which matches the ID, is deleted
      operationId: recipes-delete-recipe-by-id
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: ID of the desired recipe to patch
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorNotFound'
      summary: Delete one recipe by ID
      tags:
      - recipes
    get:
      consumes:
      - application/json
      description: One recipe, which matches the ID, is returned
      operationId: recipes-get-recipe-by-id
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: ID of the desired recipe
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recipe that matches the ID
          schema:
            $ref: '#/definitions/RecipeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorNotFound'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorInternalServerError'
      summary: Get one recipe by ID
      tags:
      - recipes
    patch:
      consumes:
      - application/json
      description: One recipe, which matches the ID, is modified with the provided
        patch
      operationId: recipes-patch-recipe-by-id
      parameters:
      - description: Authorization header for bearer token
        in: header
        name: authorization
        type: string
      - description: ID of the desired recipe to patch
        in: path
        name: id
        required: true
        type: integer
      - description: Patch for modifying the recipe
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/RecipeUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorBadRequest'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorUnauthorized'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorNotFound'
      summary: Patch one recipe by ID
      tags:
      - recipes
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
