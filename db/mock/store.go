// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PfMartin/wegonice-api/db (interfaces: DBStore)

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	db "github.com/PfMartin/wegonice-api/db"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockDBStore is a mock of DBStore interface.
type MockDBStore struct {
	ctrl     *gomock.Controller
	recorder *MockDBStoreMockRecorder
}

// MockDBStoreMockRecorder is the mock recorder for MockDBStore.
type MockDBStoreMockRecorder struct {
	mock *MockDBStore
}

// NewMockDBStore creates a new mock instance.
func NewMockDBStore(ctrl *gomock.Controller) *MockDBStore {
	mock := &MockDBStore{ctrl: ctrl}
	mock.recorder = &MockDBStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBStore) EXPECT() *MockDBStoreMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockDBStore) CreateAuthor(arg0 context.Context, arg1 db.AuthorToCreate) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", arg0, arg1)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockDBStoreMockRecorder) CreateAuthor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockDBStore)(nil).CreateAuthor), arg0, arg1)
}

// CreateRecipe mocks base method.
func (m *MockDBStore) CreateRecipe(arg0 context.Context, arg1 db.RecipeToCreate) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", arg0, arg1)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecipe indicates an expected call of CreateRecipe.
func (mr *MockDBStoreMockRecorder) CreateRecipe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockDBStore)(nil).CreateRecipe), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockDBStore) CreateSession(arg0 context.Context, arg1 db.Session) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDBStoreMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDBStore)(nil).CreateSession), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockDBStore) CreateUser(arg0 context.Context, arg1 db.User) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBStore)(nil).CreateUser), arg0, arg1)
}

// DeleteAuthorByID mocks base method.
func (m *MockDBStore) DeleteAuthorByID(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthorByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAuthorByID indicates an expected call of DeleteAuthorByID.
func (mr *MockDBStoreMockRecorder) DeleteAuthorByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorByID", reflect.TypeOf((*MockDBStore)(nil).DeleteAuthorByID), arg0, arg1)
}

// DeleteRecipeByID mocks base method.
func (m *MockDBStore) DeleteRecipeByID(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecipeByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecipeByID indicates an expected call of DeleteRecipeByID.
func (mr *MockDBStoreMockRecorder) DeleteRecipeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecipeByID", reflect.TypeOf((*MockDBStore)(nil).DeleteRecipeByID), arg0, arg1)
}

// DeleteUserByID mocks base method.
func (m *MockDBStore) DeleteUserByID(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockDBStoreMockRecorder) DeleteUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockDBStore)(nil).DeleteUserByID), arg0, arg1)
}

// GetAllAuthors mocks base method.
func (m *MockDBStore) GetAllAuthors(arg0 context.Context, arg1 db.Pagination) ([]db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthors", arg0, arg1)
	ret0, _ := ret[0].([]db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthors indicates an expected call of GetAllAuthors.
func (mr *MockDBStoreMockRecorder) GetAllAuthors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthors", reflect.TypeOf((*MockDBStore)(nil).GetAllAuthors), arg0, arg1)
}

// GetAllRecipes mocks base method.
func (m *MockDBStore) GetAllRecipes(arg0 context.Context, arg1 db.Pagination) ([]db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRecipes", arg0, arg1)
	ret0, _ := ret[0].([]db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRecipes indicates an expected call of GetAllRecipes.
func (mr *MockDBStoreMockRecorder) GetAllRecipes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRecipes", reflect.TypeOf((*MockDBStore)(nil).GetAllRecipes), arg0, arg1)
}

// GetAllUsers mocks base method.
func (m *MockDBStore) GetAllUsers(arg0 context.Context, arg1 db.Pagination) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockDBStoreMockRecorder) GetAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDBStore)(nil).GetAllUsers), arg0, arg1)
}

// GetAuthorByID mocks base method.
func (m *MockDBStore) GetAuthorByID(arg0 context.Context, arg1 string) (db.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorByID", arg0, arg1)
	ret0, _ := ret[0].(db.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorByID indicates an expected call of GetAuthorByID.
func (mr *MockDBStoreMockRecorder) GetAuthorByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorByID", reflect.TypeOf((*MockDBStore)(nil).GetAuthorByID), arg0, arg1)
}

// GetRecipeByID mocks base method.
func (m *MockDBStore) GetRecipeByID(arg0 context.Context, arg1 string) (db.Recipe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecipeByID", arg0, arg1)
	ret0, _ := ret[0].(db.Recipe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecipeByID indicates an expected call of GetRecipeByID.
func (mr *MockDBStoreMockRecorder) GetRecipeByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecipeByID", reflect.TypeOf((*MockDBStore)(nil).GetRecipeByID), arg0, arg1)
}

// GetSessionByID mocks base method.
func (m *MockDBStore) GetSessionByID(arg0 context.Context, arg1 string) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockDBStoreMockRecorder) GetSessionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockDBStore)(nil).GetSessionByID), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockDBStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDBStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDBStore)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockDBStore) GetUserByID(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockDBStoreMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDBStore)(nil).GetUserByID), arg0, arg1)
}

// UpdateAuthorByID mocks base method.
func (m *MockDBStore) UpdateAuthorByID(arg0 context.Context, arg1 string, arg2 db.AuthorUpdate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthorByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAuthorByID indicates an expected call of UpdateAuthorByID.
func (mr *MockDBStoreMockRecorder) UpdateAuthorByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthorByID", reflect.TypeOf((*MockDBStore)(nil).UpdateAuthorByID), arg0, arg1, arg2)
}

// UpdateRecipeByID mocks base method.
func (m *MockDBStore) UpdateRecipeByID(arg0 context.Context, arg1 string, arg2 db.RecipeUpdate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecipeByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecipeByID indicates an expected call of UpdateRecipeByID.
func (mr *MockDBStoreMockRecorder) UpdateRecipeByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecipeByID", reflect.TypeOf((*MockDBStore)(nil).UpdateRecipeByID), arg0, arg1, arg2)
}

// UpdateUserByID mocks base method.
func (m *MockDBStore) UpdateUserByID(arg0 context.Context, arg1 string, arg2 db.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByID indicates an expected call of UpdateUserByID.
func (mr *MockDBStoreMockRecorder) UpdateUserByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockDBStore)(nil).UpdateUserByID), arg0, arg1, arg2)
}
